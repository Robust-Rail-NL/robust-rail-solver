syntax = "proto3";

package algo_iface;

// A Location contains the part of the problem specification which is "fixed",
// meaning that everything in the following message does not change on a regular basis.
// Practically speaking, Location contains a definition for the track and facilities.
message Location {
    repeated TrackPart trackParts = 1;
    repeated Facility facilities = 2;

    // A list of all known task types
    repeated TaskType taskTypes = 3;
}

message Resource {
	// Name of this resource
	string name = 1;

	// A resource can be either a TrackPart or a Facility.
	oneof resource {
		// Set this field if this Resource is a TrackPart.
		uint64 trackPartId = 3;

		// Set this field if this Resource is a Facility.
		uint64 facilityId = 4;
	}
}

// A facility is an object at the location not part of the rails.
message Facility {
    // A unique ID which is referenced by other messages
    uint64 id = 1;

	string type = 2;

	// The TrackPart IDs this Facility can be reached from / operates on / etc.
	repeated uint64 relatedTrackParts = 3;

	// Possible tasks at this facility
	repeated TaskType taskTypes = 4;

    // The maximum number of ShuntingUnits which can use this resource at the same time
	uint32 simultaneousUsageCount = 5;
}

enum TrackPartType {
	RailRoad = 0;

	// Switches
	Switch = 1;
	EnglishSwitch = 2;
	HalfEnglishSwitch = 3;

	// Other
	Intersection = 4;
	Bumper = 5;
}

// A TrackPart forms a single node in the rail graph.
message TrackPart {
	// A unique ID; this is used to reference this TrackPart.
	uint64 id = 1;

	TrackPartType type = 2;

	// Tracks this TrackPart are connected to are defined through the aSide and bSide.
    // An explanation per TrackPartType:
    // RailRoad             aSide contains one end, and bSide the other
	// Switch:              aSide is the permanent track (that's one track), and bSide contains the branching/option tracks (that's two).
    // EnglishSwitch:       Define: AR = aSide[0], AL = aSide[1], BR = bSide[0], BL = bSide[1]. Then: AR is connected to BL and BR. AL is connected to BL and BR.
    // HalfEnglishSwitch:   Define: AR = aSide[0], AL = aSide[1], BR = bSide[0], BL = bSide[1]. Then: AR is connected to BL and BR. AL is connected to BL (but NOT BR).
	// Intersection:        Both parts of an ongoing track are in the same *Side.
    // Bumper:              aSide contains the track part. bSide is empty.
	repeated uint64 aSide = 3;
	repeated uint64 bSide = 4;

	// Length of the track in meters
	double length = 5;

    // Name of the TrackPart
    string name = 6;
    
    // For railroads: whether or not a saw movement ('kopmaken') is allowed on this railroad.
    bool sawMovementAllowed = 7;
    
    // For railroads: whether or not parking is allowed on this railroad.
    bool parkingAllowed = 8;
}

message TaskType {
	oneof taskType {
		// If the task type maps to one of PredefinedTaskType, use this type here.
		PredefinedTaskType predefined = 1;

		// Otherwise, specify a custom name.
		string other = 2;
	}
}

enum PredefinedTaskType {
	// Movement
	Move = 0;
	Split = 1;
	Combine = 2;

	// Special
	Wait = 3;
	Arrive = 4;
	Exit = 5;

	// StandOut = 6;
	// StandIn = 7;
}